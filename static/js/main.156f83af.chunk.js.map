{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","editorContentChanged","e","setState","editor","content","target","value","state","subject","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Container","fluid","Row","Col","xs","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Append","Button","variant","as","onChange","this","source","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+TA+EeA,E,YA/Db,aAAe,IAAD,8BACZ,+CAQFC,qBAAuB,SAACC,GACtB,EAAKC,SAAS,CACZC,OAAQ,CACNC,QAASH,EAAEI,OAAOC,UAVtB,EAAKC,MAAQ,CACXJ,OAAQ,CACNK,QAAS,GACTJ,QAAS,KALD,E,sEAkBZ,OACE,yBAAKK,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,yBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,sBAE/B,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGZ,UAAU,wBACpB,kBAACQ,EAAA,EAAD,CAAWR,UAAU,aAArB,WAGF,kBAACW,EAAA,EAAD,CAAKC,GAAI,EAAGZ,UAAU,0BACpB,kBAACQ,EAAA,EAAD,CAAWR,UAAU,eACnB,6BACE,kBAACa,EAAA,EAAD,CAAYb,UAAU,QACpB,kBAACc,EAAA,EAAD,CACEC,YAAY,UACZC,aAAW,UACXC,mBAAiB,iBAEnB,kBAACJ,EAAA,EAAWK,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,qBAAhB,kBAGJ,kBAACN,EAAA,EAAD,CACEd,UAAU,sBACVqB,GAAG,WACHL,aAAW,gBACXM,SAAUC,KAAKhC,0BAIvB,kBAACoB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACJ,EAAA,EAAD,CAAWR,UAAU,iBACnB,kBAAC,IAAD,CAAewB,OAAQD,KAAKzB,MAAMJ,OAAOC,mB,GAtDvC8B,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.156f83af.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport ReactMarkdown from 'react-markdown'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      editor: {\n        subject: '',\n        content: ''\n      }\n    }\n  }\n  editorContentChanged = (e) => {\n    this.setState({\n      editor: {\n        content: e.target.value\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#\">React Markdown Editor</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        </Navbar>\n        <Container fluid>\n          <Row>\n            <Col xs={2} className=\"area-list-background\">\n              <Container className=\"area-list\">\n                1 of 3\n            </Container></Col>\n            <Col xs={5} className=\"area-editor-background\">\n              <Container className=\"area-editor\">\n                <div>\n                  <InputGroup className=\"mb-3\">\n                    <FormControl\n                      placeholder=\"Subject\"\n                      aria-label=\"Subject\"\n                      aria-describedby=\"basic-addon2\"\n                    />\n                    <InputGroup.Append>\n                      <Button variant=\"outline-secondary\">儲存</Button>\n                    </InputGroup.Append>\n                  </InputGroup>\n                  <FormControl\n                    className=\"area-editor-content\"\n                    as=\"textarea\"\n                    aria-label=\"With textarea\"\n                    onChange={this.editorContentChanged} />\n                </div>\n              </Container>\n            </Col>\n            <Col xs={5}>\n              <Container className=\"area-markdown\">\n                <ReactMarkdown source={this.state.editor.content} />\n              </Container>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport ReactMarkdown from 'react-markdown'\nconst input = '# This is a header\\n\\nAnd this is a paragraph'\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<ReactMarkdown source={input} />, document.getElementById('root'));\n\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}