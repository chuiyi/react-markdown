{"version":3,"sources":["Component/SideBarColumn.js","Component/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["SideBarColumn","props","loadMarkdown","onReadMarkdown","bind","deleteMarkdown","onDeleteMarkdown","ListGroup","Item","style","textAlign","this","id","subject","Button","size","markdownId","onClick","variant","React","Component","SideBar","createMarkdown","onCreateMarkdown","readMarkdown","columns","push","listData","data","length","forEach","element","content","Container","className","App","saveListMarkdown","list","localStorage","setItem","JSON","stringify","tempState","state","editor","Date","getTime","articles","setState","e","Number","target","getAttribute","article","updateMarkdown","window","confirm","deleteArticleIndex","x","splice","alert","editorSubjectChanged","value","editorContentChanged","listMarkdown","getItem","parse","Navbar","bg","expand","Brand","href","Toggle","aria-controls","fluid","Row","Col","xs","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","Append","as","source","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QA+BeA,E,YAzBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,aAAeD,EAAME,eAAeC,KAArB,gBACpB,EAAKC,eAAiBJ,EAAMK,iBAAiBF,KAAvB,gBAHP,E,sEAOf,OACI,kBAACG,EAAA,EAAUC,KAAX,KACI,yBAAKC,MAAO,CAAEC,UAAW,SAAzB,eACiBC,KAAKV,MAAMW,IAE5B,yBAAKH,MAAO,CAAEC,UAAW,SACpBC,KAAKV,MAAMY,SAEhB,4BACA,yBAAKJ,MAAO,CAAEC,UAAW,UACrB,kBAACI,EAAA,EAAD,CAAQC,KAAK,KAAKC,WAAYL,KAAKV,MAAMW,GAAIK,QAASN,KAAKT,cAA3D,gBACA,kBAACY,EAAA,EAAD,CAAQC,KAAK,KAAKC,WAAYL,KAAKV,MAAMW,GAAIK,QAASN,KAAKN,eAAgBa,QAAQ,UAAnF,sB,GAnBQC,IAAMC,WCgCnBC,E,YA9BX,WAAYpB,GAAQ,IAAD,8BACf,4CAAMA,KACDqB,eAAiBrB,EAAMsB,iBAAiBnB,KAAvB,gBACtB,EAAKoB,aAAevB,EAAME,eAAeC,KAArB,gBACpB,EAAKC,eAAiBJ,EAAMK,iBAAiBF,KAAvB,gBAJP,E,sEAOT,IAAD,OACDqB,EAAU,GACdA,EAAQC,KAAK,kBAACZ,EAAA,EAAD,CAAQG,QAASN,KAAKW,gBAAtB,0BACb,IAAIK,EAAWhB,KAAKV,MAAM2B,KACtBD,GAAYA,EAASE,OAAS,GAC9BF,EAASG,SAAQ,SAAAC,GACbN,EAAQC,KAAK,kBAAC,EAAD,CACTd,GAAImB,EAAQnB,GACZC,QAASkB,EAAQlB,QACjBV,eAAgB,EAAKqB,aACrBlB,iBAAkB,EAAKD,qBAInC,IAAI2B,EAAU,kBAACzB,EAAA,EAAD,KAAYkB,GAC1B,OACI,kBAACQ,EAAA,EAAD,CAAWC,UAAU,aAChBF,O,GAzBKb,IAAMC,W,yDCqKbe,E,YA7Jb,WAAYlC,GAAQ,IAAD,uBACjB,4CAAMA,KAoBRmC,iBAAmB,SAACC,GAClBC,aAAaC,QAAQ,UAAWC,KAAKC,UAAUJ,KAtB9B,EAyBnBf,eAAiB,WACf,IAAIoB,EAAY,EAAKC,MACrBD,EAAUE,OAAOhC,IAAK,IAAIiC,MAAOC,UACjCJ,EAAUE,OAAO/B,QAAU,GAC3B6B,EAAUE,OAAOZ,QAAU,GAC3BU,EAAUK,SAASrB,KAAK,CACtBd,GAAI8B,EAAUE,OAAOhC,GACrBC,QAAS6B,EAAUE,OAAO/B,QAC1BmB,QAASU,EAAUE,OAAOZ,UAE5B,EAAKI,iBAAiBM,EAAUK,UAChC,EAAKC,SAASN,IApCG,EAuCnBlB,aAAe,SAACyB,GACd,IAAIrC,EAAKsC,OAAOD,EAAEE,OAAOC,aAAa,eAClCV,EAAY,EAAKC,MACrBD,EAAUK,SAASjB,SAAQ,SAACuB,GACtBA,EAAQzC,KAAOA,IACjB8B,EAAUE,OAAOhC,GAAKA,EACtB8B,EAAUE,OAAO/B,QAAUwC,EAAQxC,QACnC6B,EAAUE,OAAOZ,QAAUqB,EAAQrB,YAGvC,EAAKgB,SAASN,IAjDG,EAoDnBY,eAAiB,WACf,IAAIZ,EAAY,EAAKC,MACjBC,EAASF,EAAUE,OACvBF,EAAUK,SAASjB,SAAQ,SAACuB,GACtBA,EAAQzC,KAAOgC,EAAOhC,KACxByC,EAAQxC,QAAU+B,EAAO/B,QACzBwC,EAAQrB,QAAUY,EAAOZ,YAG7B,EAAKI,iBAAiBM,EAAUK,UAChC,EAAKC,SAASN,IA9DG,EAiEnBrC,eAAiB,SAAC4C,GAChB,IAAIrC,EAAKsC,OAAOD,EAAEE,OAAOC,aAAa,eAEtC,GADeG,OAAOC,QAAQ,6BAA+B5C,EAAK,KAClE,CAKA,IAFA,IAAI8B,EAAY,EAAKC,MACjBc,GAAsB,EACjBC,EAAI,EAAGA,EAAIhB,EAAUK,SAASlB,OAAQ6B,IAAK,CACpChB,EAAUK,SAASW,GACrB9C,KAAOA,IACjB6C,EAAqBC,GAGrBD,GAAsB,GACxBf,EAAUK,SAASY,OAAOF,EAAoB,GAEhD,EAAKrB,iBAAiBM,EAAUK,UAChC,EAAKC,SAASN,GACda,OAAOK,MAAM,WAAahD,EAAK,iBApFd,EAuFnBiD,qBAAuB,SAACZ,GACtB,IAAIP,EAAY,EAAKC,MACrBD,EAAUE,OAAO/B,QAAUoC,EAAEE,OAAOW,MACpC,EAAKd,SAASN,IA1FG,EA6FnBqB,qBAAuB,SAACd,GACtB,IAAIP,EAAY,EAAKC,MACrBD,EAAUE,OAAOZ,QAAUiB,EAAEE,OAAOW,MACpC,EAAKd,SAASN,IA7Fd,IAAIsB,EAAe1B,aAAa2B,QAAQ,WAHvB,OAIZD,EAIHA,EAAexB,KAAK0B,MAAMF,IAH1BA,EAAe,GACf,EAAK5B,iBAAiB4B,IAKxB,EAAKrB,MAAQ,CACXC,OAAQ,CACNhC,GAAI,GACJC,QAAS,GACTmB,QAAS,IAEXe,SAAUiB,GAjBK,E,sEAoGjB,OACE,yBAAK9B,UAAU,OACb,kBAACiC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,yBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,sBAE/B,kBAACxC,EAAA,EAAD,CAAWyC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAG3C,UAAU,wBACpB,kBAAC,EAAD,CACEN,KAAMjB,KAAKgC,MAAMI,SACjBxB,iBAAkBZ,KAAKW,eACvBnB,eAAgBQ,KAAKa,aACrBlB,iBAAkBK,KAAKN,kBAE3B,kBAACuE,EAAA,EAAD,CAAKC,GAAI,EAAG3C,UAAU,0BACpB,kBAACD,EAAA,EAAD,CAAWC,UAAU,eACnB,6BACE,8CAAoBvB,KAAKgC,MAAMC,OAAOhC,IACtC,kBAACkE,EAAA,EAAD,CAAY5C,UAAU,QACpB,kBAAC6C,EAAA,EAAD,CACEC,YAAY,UACZC,aAAW,UACXC,mBAAiB,eACjBpB,MAAOnD,KAAKgC,MAAMC,OAAO/B,QACzBsE,SAAUxE,KAAKkD,uBAEjB,kBAACiB,EAAA,EAAWM,OAAZ,KACE,kBAACtE,EAAA,EAAD,CAAQI,QAAQ,oBAAoBD,QAASN,KAAK2C,gBAAlD,kBAGJ,kBAACyB,EAAA,EAAD,CACE7C,UAAU,sBACVmD,GAAG,WACHJ,aAAW,gBACXnB,MAAOnD,KAAKgC,MAAMC,OAAOZ,QACzBmD,SAAUxE,KAAKoD,0BAKvB,kBAACa,EAAA,EAAD,CAAKC,GAAI,EAAG3C,UAAU,4BACpB,kBAACD,EAAA,EAAD,CAAWC,UAAU,yBACnB,4BAAKvB,KAAKgC,MAAMC,OAAO/B,SACvB,8BAEF,kBAACoB,EAAA,EAAD,CAAWC,UAAU,iBACnB,kBAAC,IAAD,CAAeoD,OAAQ3E,KAAKgC,MAAMC,OAAOZ,mB,GApJvCb,IAAMC,WCDJmE,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1404754a.chunk.js","sourcesContent":["import React from 'react'\n// import Container from 'react-bootstrap/Container'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Button from 'react-bootstrap/Button'\n\nclass SideBarColumn extends React.Component {\n    constructor(props) {\n        super(props);\n        this.loadMarkdown = props.onReadMarkdown.bind(this);\n        this.deleteMarkdown = props.onDeleteMarkdown.bind(this);\n    }\n\n    render() {\n        return (\n            <ListGroup.Item>\n                <div style={{ textAlign: 'left' }}>\n                    article id: {this.props.id}\n                </div>\n                <div style={{ textAlign: 'left' }}>\n                    {this.props.subject}\n                </div>\n                <p></p>\n                <div style={{ textAlign: 'right' }}>\n                    <Button size=\"sm\" markdownId={this.props.id} onClick={this.loadMarkdown}>讀取</Button>\n                    <Button size=\"sm\" markdownId={this.props.id} onClick={this.deleteMarkdown} variant=\"danger\">刪除</Button>\n                </div>\n            </ListGroup.Item>\n        )\n    }\n}\n\nexport default SideBarColumn;","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport SideBarColumn from './SideBarColumn'\n\nclass SideBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.createMarkdown = props.onCreateMarkdown.bind(this);\n        this.readMarkdown = props.onReadMarkdown.bind(this);\n        this.deleteMarkdown = props.onDeleteMarkdown.bind(this);\n    }\n\n    render() {\n        let columns = [];\n        columns.push(<Button onClick={this.createMarkdown}>Create a new markdown</Button>);\n        var listData = this.props.data;\n        if (listData && listData.length > 0) {\n            listData.forEach(element => {\n                columns.push(<SideBarColumn \n                    id={element.id}\n                    subject={element.subject}\n                    onReadMarkdown={this.readMarkdown}\n                    onDeleteMarkdown={this.deleteMarkdown}\n                    ></SideBarColumn>)\n            });\n        }\n        let content = <ListGroup>{columns}</ListGroup>\n        return (\n            <Container className=\"area-list\">\n                {content}\n            </Container>\n        )\n    }\n}\n\nexport default SideBar;","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport SideBar from './Component/SideBar'\nimport Navbar from 'react-bootstrap/Navbar'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport ReactMarkdown from 'react-markdown'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    var listMarkdown = localStorage.getItem('list-md');\n    if (!listMarkdown) {\n      listMarkdown = [];\n      this.saveListMarkdown(listMarkdown);\n    } else {\n      listMarkdown = JSON.parse(listMarkdown);\n    }\n\n    this.state = {\n      editor: {\n        id: '',\n        subject: '',\n        content: ''\n      },\n      articles: listMarkdown\n    };\n  }\n\n  saveListMarkdown = (list) => {\n    localStorage.setItem('list-md', JSON.stringify(list));\n  }\n\n  createMarkdown = () => {\n    let tempState = this.state;\n    tempState.editor.id = new Date().getTime();\n    tempState.editor.subject = '';\n    tempState.editor.content = '';\n    tempState.articles.push({\n      id: tempState.editor.id,\n      subject: tempState.editor.subject,\n      content: tempState.editor.content,\n    })\n    this.saveListMarkdown(tempState.articles);\n    this.setState(tempState);\n  }\n\n  readMarkdown = (e) => {\n    let id = Number(e.target.getAttribute('markdownId'));\n    var tempState = this.state;\n    tempState.articles.forEach((article) => {\n      if (article.id === id) {\n        tempState.editor.id = id;\n        tempState.editor.subject = article.subject;\n        tempState.editor.content = article.content;\n      }\n    })\n    this.setState(tempState);\n  }\n\n  updateMarkdown = () => {\n    let tempState = this.state;\n    let editor = tempState.editor;\n    tempState.articles.forEach((article) => {\n      if (article.id === editor.id) {\n        article.subject = editor.subject;\n        article.content = editor.content;\n      }\n    })\n    this.saveListMarkdown(tempState.articles);\n    this.setState(tempState);\n  }\n\n  deleteMarkdown = (e) => {\n    let id = Number(e.target.getAttribute('markdownId'));\n    var isDelete = window.confirm(\"Confirm to delete article \" + id + \"?\");\n    if (!isDelete) {\n      return;\n    }\n    var tempState = this.state;\n    var deleteArticleIndex = -1;\n    for (var x = 0; x < tempState.articles.length; x++) {\n      var article = tempState.articles[x];\n      if (article.id === id) {\n        deleteArticleIndex = x;\n      }\n    }\n    if (deleteArticleIndex >= 0) {\n      tempState.articles.splice(deleteArticleIndex, 1);\n    }\n    this.saveListMarkdown(tempState.articles);\n    this.setState(tempState);\n    window.alert(\"Article \" + id + \"is deleted!\");\n  }\n\n  editorSubjectChanged = (e) => {\n    var tempState = this.state;\n    tempState.editor.subject = e.target.value;\n    this.setState(tempState);\n  }\n\n  editorContentChanged = (e) => {\n    var tempState = this.state;\n    tempState.editor.content = e.target.value;\n    this.setState(tempState);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#\">React Markdown Editor</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        </Navbar>\n        <Container fluid>\n          <Row>\n            <Col xs={2} className=\"area-list-background\">\n              <SideBar\n                data={this.state.articles}\n                onCreateMarkdown={this.createMarkdown}\n                onReadMarkdown={this.readMarkdown}\n                onDeleteMarkdown={this.deleteMarkdown}></SideBar>\n            </Col>\n            <Col xs={5} className=\"area-editor-background\">\n              <Container className=\"area-editor\">\n                <div>\n                  <label>article id: {this.state.editor.id}</label>\n                  <InputGroup className=\"mb-3\">\n                    <FormControl\n                      placeholder=\"Subject\"\n                      aria-label=\"Subject\"\n                      aria-describedby=\"basic-addon2\"\n                      value={this.state.editor.subject}\n                      onChange={this.editorSubjectChanged}\n                    />\n                    <InputGroup.Append>\n                      <Button variant=\"outline-secondary\" onClick={this.updateMarkdown}>儲存</Button>\n                    </InputGroup.Append>\n                  </InputGroup>\n                  <FormControl\n                    className=\"area-editor-content\"\n                    as=\"textarea\"\n                    aria-label=\"With textarea\"\n                    value={this.state.editor.content}\n                    onChange={this.editorContentChanged}\n                  />\n                </div>\n              </Container>\n            </Col>\n            <Col xs={5} className=\"area-markdown-background\">\n              <Container className=\"area-markdown-subject\">\n                <h3>{this.state.editor.subject}</h3>\n                <hr></hr>\n              </Container>\n              <Container className=\"area-markdown\">\n                <ReactMarkdown source={this.state.editor.content} />\n              </Container>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}